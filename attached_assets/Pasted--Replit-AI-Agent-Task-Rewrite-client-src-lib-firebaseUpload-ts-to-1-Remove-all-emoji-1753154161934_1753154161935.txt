// 📦 Replit AI Agent Task:
// Rewrite `client/src/lib/firebaseUpload.ts` to:
// 1. Remove all emojis from logs
// 2. Use the initialized `storage` and `app` from `firebase.ts` instead of reinitializing Firebase here
// 3. Ensure clear logging and minimal error noise
// 4. Keep existing functionality, including:
//    - `uploadFileToFirebase`
//    - `uploadMultipleFilesToFirebase`
// 5. Ensure the upload path uses `temp_uploads/{jobId}/{filename}` as previously implemented

// 🔁 Replace the entire contents of firebaseUpload.ts with the following:

import { storage } from './firebase';
import { ref, uploadBytesResumable, getDownloadURL } from "firebase/storage";
import { apiRequest } from "./queryClient";

export interface UploadProgress {
  bytesTransferred: number;
  totalBytes: number;
  progress: number;
}

export interface FirebaseUploadResult {
  downloadUrl: string;
  firebasePath: string;
  fileName: string;
  fileSize: number;
  contentType: string;
}

export const uploadFileToFirebase = async (
  file: File,
  jobId: string | number,
  mediaType: 'raw' | 'finished' = 'raw',
  onProgress?: (progress: UploadProgress) => void
): Promise<FirebaseUploadResult> => {
  try {
    const prepareResponse = await apiRequest('POST', `/api/jobs/${jobId}/upload`, {
      fileName: file.name,
      contentType: file.type,
      fileSize: file.size,
      category: 'photography',
      mediaType: mediaType
    });

    if (!prepareResponse.firebasePath) {
      throw new Error('Upload failed: No Firebase path returned from backend.');
    }

    const { firebasePath } = prepareResponse;
    const storageRef = ref(storage, firebasePath);
    const uploadTask = uploadBytesResumable(storageRef, file);

    return new Promise((resolve, reject) => {
      uploadTask.on(
        'state_changed',
        (snapshot) => {
          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
          if (onProgress) {
            onProgress({
              bytesTransferred: snapshot.bytesTransferred,
              totalBytes: snapshot.totalBytes,
              progress: Math.round(progress),
            });
          }
          console.log(`Upload progress: ${Math.round(progress)}%`);
        },
        (error) => {
          console.error('Firebase upload error:', error);
          reject(new Error(`Upload failed: ${error.message || error.code || 'Unknown error'}`));
        },
        async () => {
          try {
            const downloadUrl = await getDownloadURL(uploadTask.snapshot.ref);

            await apiRequest('POST', `/api/jobs/${jobId}/process-file`, {
              firebasePath,
              downloadUrl,
              fileName: file.name,
              contentType: file.type,
              fileSize: file.size,
              category: 'photography',
              mediaType: mediaType
            });

            resolve({
              downloadUrl,
              firebasePath,
              fileName: file.name,
              fileSize: file.size,
              contentType: file.type
            });
          } catch (error) {
            console.error('Error finalizing upload with backend:', error);
            reject(error);
          }
        }
      );
    });
  } catch (error) {
    console.error('Failed to upload file to Firebase:', error);
    throw error;
  }
};

export const uploadMultipleFilesToFirebase = async (
  files: File[],
  jobId: string | number,
  mediaType: 'raw' | 'finished' = 'raw',
  onProgress?: (fileName: string, progress: UploadProgress) => void
): Promise<FirebaseUploadResult[]> => {
  const results: FirebaseUploadResult[] = [];

  for (const file of files) {
    try {
      const result = await uploadFileToFirebase(
        file,
        jobId,
        mediaType,
        (progress) => {
          if (onProgress) {
            onProgress(file.name, progress);
          }
        }
      );
      results.push(result);
    } catch (error) {
      console.error(`Failed to upload file ${file.name}:`, error);
      throw error;
    }
  }

  return results;
};