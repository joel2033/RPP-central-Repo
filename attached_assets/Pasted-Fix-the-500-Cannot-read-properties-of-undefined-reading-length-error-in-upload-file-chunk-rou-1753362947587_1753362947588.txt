Fix the 500 "Cannot read properties of undefined (reading 'length')" error in /upload-file-chunk route for RPP platform by adding undefined checks and fallback to full upload in server/routes/jobs.js.

Steps to implement:
1. In server/routes/jobs.js, update /upload-file-chunk to handle undefined file or range:
router.post('/:jobId/upload-file-chunk', upload.single('file'), async (req, res) => {
  res.setHeader('Content-Type', 'application/json');
  try {
    const { jobId } = req.params;
    const file = req.file;
    if (!file || !file.buffer) return res.status(400).json({ error: 'No chunk data' });
    const rangeHeader = req.headers['content-range'];
    if (!rangeHeader) {
      // Fallback to full file upload
      const bucket = admin.storage().bucket();
      const filePath = `temp_uploads/${jobId}/${req.body.fileName || file.originalname}`;
      await bucket.file(filePath).save(file.buffer, { metadata: { contentType: file.mimetype } });
      const [url] = await bucket.file(filePath).getSignedUrl({ action: 'read', expires: '03-09-2491' });
      return res.json({ success: true, downloadUrl: url });
    }
    const range = rangeHeader.match(/bytes (\d+)-(\d+)\/(\d+)/);
    if (!range) return res.status(400).json({ error: 'Invalid Content-Range' });
    const [ , start, end, total ] = range;
    const bucket = admin.storage().bucket();
    const filePath = `temp_uploads/${jobId}/${req.body.fileName || file.originalname}`;
    const fileRef = bucket.file(filePath);
    const writeStream = fileRef.createWriteStream({ start: parseInt(start) });
    writeStream.end(file.buffer);
    if (parseInt(end) + 1 === parseInt(total)) {
      const [url] = await fileRef.getSignedUrl({ action: 'read', expires: '03-09-2491' });
      res.json({ success: true, downloadUrl: url });
    } else {
      res.json({ success: true });
    }
  } catch (err) {
    console.error('Chunk error:', err);
    res.status(500).json({ error: err.message });
  }
});
module.exports = router;
2. In client/src/lib/firebaseUpload.ts, increase retries to 5 and add 5s delay:
let retries = 5;
let delay = 5000;
while (retries > 0) {
  try {
    // fetch code...
    if (!response.ok) {
      const text = await response.text();
      console.error('Chunk failed: ', text);
      throw new Error(`Chunk failed: ${response.status} - ${text}`);
    }
    break;
  } catch (err) {
    retries--;
    await new Promise(resolve => setTimeout(resolve, delay));
    delay *= 2; // Exponential backoff
  }
}
4. Add Firebase Storage emulator in client/src/lib/firebase.ts for dev:
if (process.env.NODE_ENV === 'development') {
  connectStorageEmulator(storage, 'localhost', 9199);
}
- Run `firebase emulators:start --only storage` in shell.
5. Manual: Run storage emulator; test large .dng; check for 500 in logs.

This fixes undefined and adds emulator for testing. Commit with message: "Add undefined checks and emulator for chunk uploads to fix 500 error in Upload to Editor"