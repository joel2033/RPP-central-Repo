Absolutely â€” hereâ€™s a copy-paste ready prompt for your Replit AI Agent that covers everything discussed, structured in steps with precise actions.

â¸»

ðŸ§  Prompt for Replit AI Agent

ðŸ‘‡ Paste this into your Replit AI chat:

â¸»

Hi Replit AI Agent, I need your help improving how RAW image uploads are handled in this app. Please carry out the following changes step-by-step:

â¸»

ðŸ”§ GOAL

Improve the RAW image upload workflow:
	â€¢	Save metadata to the database
	â€¢	Link uploads to the correct Job ID, address, and uploader
	â€¢	Auto-delete RAW files after 14 days via S3 lifecycle
	â€¢	Restrict access to only the right uploader or licensee

â¸»

âœ… 1. Create processUploadedFile() Controller

In jobController.ts, add a new function:

export const processUploadedFile = async (req: Request, res: Response) => {
  const { jobId, fileName, s3Key, mediaType, fileSize, contentType } = req.body;
  const userId = req.user?.id;

  const job = await storage.getJobCard(jobId);
  if (!job) return res.status(404).json({ message: "Job not found" });

  await storage.insertMediaFile({
    jobId,
    address: job.propertyAddress,
    uploaderId: userId,
    fileName,
    s3Key,
    mediaType,
    fileSize,
    contentType,
    uploadTimestamp: new Date(),
  });

  return res.status(200).json({ message: "File registered" });
};


â¸»

âœ… 2. Add insertMediaFile() to storage.ts

async insertMediaFile(file: InsertMediaFile): Promise<MediaFile> {
  return await db.insert(mediaFiles).values(file).returning().then(r => r[0]);
}


â¸»

âœ… 3. Update mediaFiles Table (if needed)

Ensure the mediaFiles schema includes the following fields:
	â€¢	jobId (number)
	â€¢	address (string)
	â€¢	uploaderId (string)
	â€¢	fileName (string)
	â€¢	s3Key (string)
	â€¢	mediaType (enum: â€˜rawâ€™ | â€˜finishedâ€™)
	â€¢	fileSize (number)
	â€¢	contentType (string)
	â€¢	uploadTimestamp (timestamp)

Use InsertMediaFile and MediaFile types in @shared/schema.

â¸»

âœ… 4. Add Access Control for Media Files

In your media download/view route, add this check:

if (file.uploaderId !== user.id && file.licenseeId !== user.licenseeId) {
  return res.status(403).json({ message: "Access denied" });
}


â¸»

âœ… 5. Add S3 Lifecycle Policy for RAW Uploads

Create a rule on the S3 bucket (or provide AWS CLI code if necessary):

S3 Rule:

{
  "Rules": [
    {
      "ID": "DeleteRawAfter14Days",
      "Prefix": "job-/raw/",
      "Status": "Enabled",
      "Expiration": {
        "Days": 14
      }
    }
  ]
}


â¸»

âœ… 6. Optional: Log Upload in jobActivityLog

If time allows, insert a log entry like:

await storage.logJobActivity({
  jobId,
  type: 'upload',
  message: `User ${userId} uploaded RAW file: ${fileName}`,
  timestamp: new Date()
});


